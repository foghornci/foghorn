/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/foghornci/foghorn/pkg/apis/foghorn.jenkins.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GitEventListLister helps list GitEventLists.
type GitEventListLister interface {
	// List lists all GitEventLists in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GitEventList, err error)
	// GitEventLists returns an object that can list and get GitEventLists.
	GitEventLists(namespace string) GitEventListNamespaceLister
	GitEventListListerExpansion
}

// gitEventListLister implements the GitEventListLister interface.
type gitEventListLister struct {
	indexer cache.Indexer
}

// NewGitEventListLister returns a new GitEventListLister.
func NewGitEventListLister(indexer cache.Indexer) GitEventListLister {
	return &gitEventListLister{indexer: indexer}
}

// List lists all GitEventLists in the indexer.
func (s *gitEventListLister) List(selector labels.Selector) (ret []*v1alpha1.GitEventList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitEventList))
	})
	return ret, err
}

// GitEventLists returns an object that can list and get GitEventLists.
func (s *gitEventListLister) GitEventLists(namespace string) GitEventListNamespaceLister {
	return gitEventListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitEventListNamespaceLister helps list and get GitEventLists.
type GitEventListNamespaceLister interface {
	// List lists all GitEventLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GitEventList, err error)
	// Get retrieves the GitEventList from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GitEventList, error)
	GitEventListNamespaceListerExpansion
}

// gitEventListNamespaceLister implements the GitEventListNamespaceLister
// interface.
type gitEventListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitEventLists in the indexer for a given namespace.
func (s gitEventListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GitEventList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitEventList))
	})
	return ret, err
}

// Get retrieves the GitEventList from the indexer for a given namespace and name.
func (s gitEventListNamespaceLister) Get(name string) (*v1alpha1.GitEventList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("giteventlist"), name)
	}
	return obj.(*v1alpha1.GitEventList), nil
}
